#2.1
pip install numpy scikit-learn 

# Import installed packages
import numpy
from sklearn import linear_model

# Define your data
X = numpy.array([3.78, 2.44, 2.09, 0.14, 1.72, 1.65, 4.92, 4.37, 4.96, 4.52, 3.69, 5.88]).reshape(-1, 1)
y = numpy.array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1])

# Create and fit the logistic regression model
logr = linear_model.LogisticRegression()
logr.fit(X, y)

# 1) Predict if a tumor is cancerous where the size is 3.46mm:
predicted = logr.predict(numpy.array([[3.46]]))  # Use double brackets for input
print(predicted)

# 2) Define a function to convert logit to probability
def logit2prob(logr, X_value):
    log_odds = logr.coef_ * X_value + logr.intercept_
    odds = numpy.exp(log_odds)
    probability = odds / (1 + odds)
    return probability

# Test the logit2prob function
print(logit2prob(logr, X)) 

#Theory:-
#    Logistic regression is one of the most popular Machine Learning algorithms,
# which comes under the Supervised Learning technique. It is used for
# predicting the categorical dependent variable using a given set of independent
# variables.
#    Logistic regression predicts the output of a categorical dependent variable.
# Therefore the outcome must be a categorical or discrete value. It can be either
# Yes or No, 0 or 1, true or False, etc. but instead of giving the exact value as 0
# and 1, it gives the probabilistic values which lie between 0 and 1.
#    Logistic Regression is much similar to the Linear Regression except that how
# they are used. Linear Regression is used for solving Regression problems,
# whereas Logistic regression is used for solving the classification problems.

# Algorithm is hidden in '#' above code