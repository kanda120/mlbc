pip install pandas scikit-learn graphviz pydotplus

# Import required libraries
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics

# Create diabetes.csv file in Excel

#   	pregnant	glucose	bp	skin	insulin	bmi	    pedigree	age	    label
#   0	6	        148	    72	35	    0	    33.6	0.627	    50	    1
#   1	1	        85	    66	29	    0	    26.6	0.351	    31	    0
#   2	8	        183	    64	0	    0	    23.3	0.672	    32	    1
#   3	1	        89	    66	23	    94	    28.1	0.167	    21	    0
#   4	0	        137	    40	35	    168	    43.1	2.288	    33	    1

# Read the CSV data and define column names
col_names = ['pregnant', 'glucose', 'bp', 'skin', 'insulin', 'bmi', 'pedigree', 'age', 'label']
pima = pd.read_csv(r'diabetes.csv', header= 0, names=col_names )
pima.head()

# Define feature columns and the target variable
feature_cols = ['pregnant', 'glucose', 'bp', 'insulin', 'bmi', 'pedigree', 'age']
x = pima[feature_cols]
y = pima.label

# Split the data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)

# Create and fit the Decision Tree classifier
clf = DecisionTreeClassifier()
clf = clf.fit(x_train, y_train)

# Make predictions on the test set
y_pred = clf.predict(x_test)

# Calculate the accuracy
accuracy = metrics.accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

from sklearn.tree import export_graphviz
from six import StringIO
from IPython.display import Image
import graphviz
import pydotplus

conda install graphviz

# Visualize the decision tree
dot_data = export_graphviz(clf, out_file=None, 
                            filled=True, rounded=True, 
                            special_characters=True, 
                            feature_names=feature_cols, 
                            class_names=['0', '1'])

graph = pydotplus.graph_from_dot_data(dot_data)
graph.write_png('diabetes.png')
Image(graph.create_png()) 

# Displayed the generated PNG image of the decision tree using
# the Image object from the IPython.display module.

#Theory:
#   A decision tree is a flowchart-like tree structure where an internal node represents a
# feature(or attribute), the branch represents a decision rule, and each leaf node
# represents the outcome.
#    The topmost node in a decision tree is known as the root node. It learns to partition
# on the basis of the attribute value. It partitions the tree in a recursive manner called
# recursive partitioning. This flowchart-like structure helps in decision-making. It's
# visualization like a flowchart diagram which easily mimics the human level thinking.

# Algorithm is hidden in '#' above code